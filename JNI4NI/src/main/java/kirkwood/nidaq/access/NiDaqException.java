/**
 ********************************************************************* 
 * JNI4NI Java Native Interface wrapper for National Instruments DAQ.
 ********************************************************************* 
 * (c) 2015 David Kirkwood            Email: davekirkwood@hotmail.com 
 ********************************************************************* 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */

package kirkwood.nidaq.access;

public class NiDaqException extends Exception {

	private int errorCode;
	
	public NiDaqException(int errorCode) {
		this.errorCode = errorCode;
	}
	
	/**
	 * Translate the DAQ numerical error code into the event type.
	 */
	public String toString() {
		String errorMessage = null;
		switch(errorCode) {
		case -200683: errorMessage = "DAQmxErrorInvalidInstallation."; break;
		case -200682: errorMessage = "DAQmxErrorRefTrigMasterSessionUnavailable."; break;
		case -200681: errorMessage = "DAQmxErrorRouteFailedBecauseWatchdogExpired."; break;
		case -200680: errorMessage = "DAQmxErrorDeviceShutDownDueToHighTemp."; break;
		case -200679: errorMessage = "DAQmxErrorNoMemMapWhenHWTimedSinglePoint."; break;
		case -200678: errorMessage = "DAQmxErrorWriteFailedBecauseWatchdogExpired."; break;
		case -200677: errorMessage = "DAQmxErrorDifftInternalAIInputSrcs."; break;
		case -200676: errorMessage = "DAQmxErrorDifftAIInputSrcInOneChanGroup."; break;
		case -200675: errorMessage = "DAQmxErrorInternalAIInputSrcInMultChanGroups."; break;
		case -200674: errorMessage = "DAQmxErrorSwitchOpFailedDueToPrevError."; break;
		case -200673: errorMessage = "DAQmxErrorWroteMultiSampsUsingSingleSampWrite."; break;
		case -200672: errorMessage = "DAQmxErrorMismatchedInputArraySizes."; break;
		case -200671: errorMessage = "DAQmxErrorCantExceedRelayDriveLimit."; break;
		case -200670: errorMessage = "DAQmxErrorDACRngLowNotEqualToMinusRefVal."; break;
		case -200669: errorMessage = "DAQmxErrorCantAllowConnectDACToGnd."; break;
		case -200668: errorMessage = "DAQmxErrorWatchdogTimeoutOutOfRangeAndNotSpecialVal."; break;
		case -200667: errorMessage = "DAQmxErrorNoWatchdogOutputOnPortReservedForInput."; break;
		case -200666: errorMessage = "DAQmxErrorNoInputOnPortCfgdForWatchdogOutput."; break;
		case -200665: errorMessage = "DAQmxErrorWatchdogExpirationStateNotEqualForLinesInPort."; break;
		case -200664: errorMessage = "DAQmxErrorCannotPerformOpWhenTaskNotReserved."; break;
		case -200663: errorMessage = "DAQmxErrorPowerupStateNotSupported."; break;
		case -200662: errorMessage = "DAQmxErrorWatchdogTimerNotSupported."; break;
		case -200661: errorMessage = "DAQmxErrorOpNotSupportedWhenRefClkSrcNone."; break;
		case -200660: errorMessage = "DAQmxErrorSampClkRateUnavailable."; break;
		case -200659: errorMessage = "DAQmxErrorPrptyGetSpecdSingleActiveChanFailedDueToDifftVals."; break;
		case -200658: errorMessage = "DAQmxErrorPrptyGetImpliedActiveChanFailedDueToDifftVals."; break;
		case -200657: errorMessage = "DAQmxErrorPrptyGetSpecdActiveChanFailedDueToDifftVals."; break;
		case -200656: errorMessage = "DAQmxErrorNoRegenWhenUsingBrdMem."; break;
		case -200655: errorMessage = "DAQmxErrorNonbufferedReadMoreThanSampsPerChan."; break;
		case -200654: errorMessage = "DAQmxErrorWatchdogExpirationTristateNotSpecdForEntirePort."; break;
		case -200653: errorMessage = "DAQmxErrorPowerupTristateNotSpecdForEntirePort."; break;
		case -200652: errorMessage = "DAQmxErrorPowerupStateNotSpecdForEntirePort."; break;
		case -200651: errorMessage = "DAQmxErrorCantSetWatchdogExpirationOnDigInChan."; break;
		case -200650: errorMessage = "DAQmxErrorCantSetPowerupStateOnDigInChan."; break;
		case -200649: errorMessage = "DAQmxErrorPhysChanNotInTask."; break;
		case -200648: errorMessage = "DAQmxErrorPhysChanDevNotInTask."; break;
		case -200647: errorMessage = "DAQmxErrorDigInputNotSupported."; break;
		case -200646: errorMessage = "DAQmxErrorDigFilterIntervalNotEqualForLines."; break;
		case -200645: errorMessage = "DAQmxErrorDigFilterIntervalAlreadyCfgd."; break;
		case -200644: errorMessage = "DAQmxErrorCantResetExpiredWatchdog."; break;
		case -200643: errorMessage = "DAQmxErrorActiveChanTooManyLinesSpecdWhenGettingPrpty."; break;
		case -200642: errorMessage = "DAQmxErrorActiveChanNotSpecdWhenGetting1LinePrpty."; break;
		case -200641: errorMessage = "DAQmxErrorDigPrptyCannotBeSetPerLine."; break;
		case -200640: errorMessage = "DAQmxErrorSendAdvCmpltAfterWaitForTrigInScanlist."; break;
		case -200639: errorMessage = "DAQmxErrorDisconnectionRequiredInScanlist."; break;
		case -200638: errorMessage = "DAQmxErrorTwoWaitForTrigsAfterConnectionInScanlist."; break;
		case -200637: errorMessage = "DAQmxErrorActionSeparatorRequiredAfterBreakingConnectionInScanlist."; break;
		case -200636: errorMessage = "DAQmxErrorConnectionInScanlistMustWaitForTrig."; break;
		case -200635: errorMessage = "DAQmxErrorActionNotSupportedTaskNotWatchdog."; break;
		case -200634: errorMessage = "DAQmxErrorWfmNameSameAsScriptName."; break;
		case -200633: errorMessage = "DAQmxErrorScriptNameSameAsWfmName."; break;
		case -200632: errorMessage = "DAQmxErrorDSFStopClock."; break;
		case -200631: errorMessage = "DAQmxErrorDSFReadyForStartClock."; break;
		case -200630: errorMessage = "DAQmxErrorWriteOffsetNotMultOfIncr."; break;
		case -200629: errorMessage = "DAQmxErrorDifferentPrptyValsNotSupportedOnDev."; break;
		case -200628: errorMessage = "DAQmxErrorRefAndPauseTrigConfigured."; break;
		case -200627: errorMessage = "DAQmxErrorFailedToEnableHighSpeedInputClock."; break;
		case -200626: errorMessage = "DAQmxErrorEmptyPhysChanInPowerUpStatesArray."; break;
		case -200625: errorMessage = "DAQmxErrorActivePhysChanTooManyLinesSpecdWhenGettingPrpty."; break;
		case -200624: errorMessage = "DAQmxErrorActivePhysChanNotSpecdWhenGetting1LinePrpty."; break;
		case -200623: errorMessage = "DAQmxErrorPXIDevTempCausedShutDown."; break;
		case -200622: errorMessage = "DAQmxErrorInvalidNumSampsToWrite."; break;
		case -200621: errorMessage = "DAQmxErrorOutputFIFOUnderflow2."; break;
		case -200620: errorMessage = "DAQmxErrorRepeatedAIPhysicalChan."; break;
		case -200619: errorMessage = "DAQmxErrorMultScanOpsInOneChassis."; break;
		case -200618: errorMessage = "DAQmxErrorInvalidAIChanOrder."; break;
		case -200617: errorMessage = "DAQmxErrorReversePowerProtectionActivated."; break;
		case -200616: errorMessage = "DAQmxErrorInvalidAsynOpHandle."; break;
		case -200615: errorMessage = "DAQmxErrorFailedToEnableHighSpeedOutput."; break;
		case -200614: errorMessage = "DAQmxErrorCannotReadPastEndOfRecord."; break;
		case -200613: errorMessage = "DAQmxErrorAcqStoppedToPreventInputBufferOverwriteOneDataXferMech."; break;
		case -200612: errorMessage = "DAQmxErrorZeroBasedChanIndexInvalid."; break;
		case -200611: errorMessage = "DAQmxErrorNoChansOfGivenTypeInTask."; break;
		case -200610: errorMessage = "DAQmxErrorSampClkSrcInvalidForOutputValidForInput."; break;
		case -200609: errorMessage = "DAQmxErrorOutputBufSizeTooSmallToStartGen."; break;
		case -200608: errorMessage = "DAQmxErrorInputBufSizeTooSmallToStartAcq."; break;
		case -200607: errorMessage = "DAQmxErrorExportTwoSignalsOnSameTerminal."; break;
		case -200606: errorMessage = "DAQmxErrorChanIndexInvalid."; break;
		case -200605: errorMessage = "DAQmxErrorRangeSyntaxNumberTooBig."; break;
		case -200604: errorMessage = "DAQmxErrorNULLPtr."; break;
		case -200603: errorMessage = "DAQmxErrorScaledMinEqualMax."; break;
		case -200602: errorMessage = "DAQmxErrorPreScaledMinEqualMax."; break;
		case -200601: errorMessage = "DAQmxErrorPropertyNotSupportedForScaleType."; break;
		case -200600: errorMessage = "DAQmxErrorChannelNameGenerationNumberTooBig."; break;
		case -200599: errorMessage = "DAQmxErrorRepeatedNumberInScaledValues."; break;
		case -200598: errorMessage = "DAQmxErrorRepeatedNumberInPreScaledValues."; break;
		case -200597: errorMessage = "DAQmxErrorLinesAlreadyReservedForOutput."; break;
		case -200596: errorMessage = "DAQmxErrorSwitchOperationChansSpanMultipleDevsInList."; break;
		case -200595: errorMessage = "DAQmxErrorInvalidIDInListAtBeginningOfSwitchOperation."; break;
		case -200594: errorMessage = "DAQmxErrorMStudioInvalidPolyDirection."; break;
		case -200593: errorMessage = "DAQmxErrorMStudioPropertyGetWhileTaskNotVerified."; break;
		case -200592: errorMessage = "DAQmxErrorRangeWithTooManyObjects."; break;
		case -200591: errorMessage = "DAQmxErrorCppDotNetAPINegativeBufferSize."; break;
		case -200590: errorMessage = "DAQmxErrorCppCantRemoveInvalidEventHandler."; break;
		case -200589: errorMessage = "DAQmxErrorCppCantRemoveEventHandlerTwice."; break;
		case -200588: errorMessage = "DAQmxErrorCppCantRemoveOtherObjectsEventHandler."; break;
		case -200587: errorMessage = "DAQmxErrorDigLinesReservedOrUnavailable."; break;
		case -200586: errorMessage = "DAQmxErrorDSFFailedToResetStream."; break;
		case -200585: errorMessage = "DAQmxErrorDSFReadyForOutputNotAsserted."; break;
		case -200584: errorMessage = "DAQmxErrorSampToWritePerChanNotMultipleOfIncr."; break;
		case -200583: errorMessage = "DAQmxErrorAOPropertiesCauseVoltageBelowMin."; break;
		case -200582: errorMessage = "DAQmxErrorAOPropertiesCauseVoltageOverMax."; break;
		case -200581: errorMessage = "DAQmxErrorPropertyNotSupportedWhenRefClkSrcNone."; break;
		case -200580: errorMessage = "DAQmxErrorAIMaxTooSmall."; break;
		case -200579: errorMessage = "DAQmxErrorAIMaxTooLarge."; break;
		case -200578: errorMessage = "DAQmxErrorAIMinTooSmall."; break;
		case -200577: errorMessage = "DAQmxErrorAIMinTooLarge."; break;
		case -200576: errorMessage = "DAQmxErrorBuiltInCJCSrcNotSupported."; break;
		case -200575: errorMessage = "DAQmxErrorTooManyPostTrigSampsPerChan."; break;
		case -200574: errorMessage = "DAQmxErrorTrigLineNotFoundSingleDevRoute."; break;
		case -200573: errorMessage = "DAQmxErrorDifferentInternalAIInputSources."; break;
		case -200572: errorMessage = "DAQmxErrorDifferentAIInputSrcInOneChanGroup."; break;
		case -200571: errorMessage = "DAQmxErrorInternalAIInputSrcInMultipleChanGroups."; break;
		case -200570: errorMessage = "DAQmxErrorCAPIChanIndexInvalid."; break;
		case -200569: errorMessage = "DAQmxErrorCollectionDoesNotMatchChanType."; break;
		case -200568: errorMessage = "DAQmxErrorOutputCantStartChangedRegenerationMode."; break;
		case -200567: errorMessage = "DAQmxErrorOutputCantStartChangedBufferSize."; break;
		case -200566: errorMessage = "DAQmxErrorChanSizeTooBigForU32PortWrite."; break;
		case -200565: errorMessage = "DAQmxErrorChanSizeTooBigForU8PortWrite."; break;
		case -200564: errorMessage = "DAQmxErrorChanSizeTooBigForU32PortRead."; break;
		case -200563: errorMessage = "DAQmxErrorChanSizeTooBigForU8PortRead."; break;
		case -200562: errorMessage = "DAQmxErrorInvalidDigDataWrite."; break;
		case -200561: errorMessage = "DAQmxErrorInvalidAODataWrite."; break;
		case -200560: errorMessage = "DAQmxErrorWaitUntilDoneDoesNotIndicateDone."; break;
		case -200559: errorMessage = "DAQmxErrorMultiChanTypesInTask."; break;
		case -200558: errorMessage = "DAQmxErrorMultiDevsInTask."; break;
		case -200557: errorMessage = "DAQmxErrorCannotSetPropertyWhenTaskRunning."; break;
		case -200556: errorMessage = "DAQmxErrorCannotGetPropertyWhenTaskNotCommittedOrRunning."; break;
		case -200555: errorMessage = "DAQmxErrorLeadingUnderscoreInString."; break;
		case -200554: errorMessage = "DAQmxErrorTrailingSpaceInString."; break;
		case -200553: errorMessage = "DAQmxErrorLeadingSpaceInString."; break;
		case -200552: errorMessage = "DAQmxErrorInvalidCharInString."; break;
		case -200551: errorMessage = "DAQmxErrorDLLBecameUnlocked."; break;
		case -200550: errorMessage = "DAQmxErrorDLLLock."; break;
		case -200549: errorMessage = "DAQmxErrorSelfCalConstsInvalid."; break;
		case -200548: errorMessage = "DAQmxErrorInvalidTrigCouplingExceptForExtTrigChan."; break;
		case -200547: errorMessage = "DAQmxErrorWriteFailsBufferSizeAutoConfigured."; break;
		case -200546: errorMessage = "DAQmxErrorExtCalAdjustExtRefVoltageFailed."; break;
		case -200545: errorMessage = "DAQmxErrorSelfCalFailedExtNoiseOrRefVoltageOutOfCal."; break;
		case -200544: errorMessage = "DAQmxErrorExtCalTemperatureNotDAQmx."; break;
		case -200543: errorMessage = "DAQmxErrorExtCalDateTimeNotDAQmx."; break;
		case -200542: errorMessage = "DAQmxErrorSelfCalTemperatureNotDAQmx."; break;
		case -200541: errorMessage = "DAQmxErrorSelfCalDateTimeNotDAQmx."; break;
		case -200540: errorMessage = "DAQmxErrorDACRefValNotSet."; break;
		case -200539: errorMessage = "DAQmxErrorAnalogMultiSampWriteNotSupported."; break;
		case -200538: errorMessage = "DAQmxErrorInvalidActionInControlTask."; break;
		case -200537: errorMessage = "DAQmxErrorPolyCoeffsInconsistent."; break;
		case -200536: errorMessage = "DAQmxErrorSensorValTooLow."; break;
		case -200535: errorMessage = "DAQmxErrorSensorValTooHigh."; break;
		case -200534: errorMessage = "DAQmxErrorWaveformNameTooLong."; break;
		case -200533: errorMessage = "DAQmxErrorIdentifierTooLongInScript."; break;
		case -200532: errorMessage = "DAQmxErrorUnexpectedIDFollowingSwitchChanName."; break;
		case -200531: errorMessage = "DAQmxErrorRelayNameNotSpecifiedInList."; break;
		case -200530: errorMessage = "DAQmxErrorUnexpectedIDFollowingRelayNameInList."; break;
		case -200529: errorMessage = "DAQmxErrorUnexpectedIDFollowingSwitchOpInList."; break;
		case -200528: errorMessage = "DAQmxErrorInvalidLineGrouping."; break;
		case -200527: errorMessage = "DAQmxErrorCtrMinMax."; break;
		case -200526: errorMessage = "DAQmxErrorWriteChanTypeMismatch."; break;
		case -200525: errorMessage = "DAQmxErrorReadChanTypeMismatch."; break;
		case -200524: errorMessage = "DAQmxErrorWriteNumChansMismatch."; break;
		case -200523: errorMessage = "DAQmxErrorOneChanReadForMultiChanTask."; break;
		case -200522: errorMessage = "DAQmxErrorCannotSelfCalDuringExtCal."; break;
		case -200521: errorMessage = "DAQmxErrorMeasCalAdjustOscillatorPhaseDAC."; break;
		case -200520: errorMessage = "DAQmxErrorInvalidCalConstCalADCAdjustment."; break;
		case -200519: errorMessage = "DAQmxErrorInvalidCalConstOscillatorFreqDACValue."; break;
		case -200518: errorMessage = "DAQmxErrorInvalidCalConstOscillatorPhaseDACValue."; break;
		case -200517: errorMessage = "DAQmxErrorInvalidCalConstOffsetDACValue."; break;
		case -200516: errorMessage = "DAQmxErrorInvalidCalConstGainDACValue."; break;
		case -200515: errorMessage = "DAQmxErrorInvalidNumCalADCReadsToAverage."; break;
		case -200514: errorMessage = "DAQmxErrorInvalidCfgCalAdjustDirectPathOutputImpedance."; break;
		case -200513: errorMessage = "DAQmxErrorInvalidCfgCalAdjustMainPathOutputImpedance."; break;
		case -200512: errorMessage = "DAQmxErrorInvalidCfgCalAdjustMainPathPostAmpGainAndOffset."; break;
		case -200511: errorMessage = "DAQmxErrorInvalidCfgCalAdjustMainPathPreAmpGain."; break;
		case -200510: errorMessage = "DAQmxErrorInvalidCfgCalAdjustMainPreAmpOffset."; break;
		case -200509: errorMessage = "DAQmxErrorMeasCalAdjustCalADC."; break;
		case -200508: errorMessage = "DAQmxErrorMeasCalAdjustOscillatorFrequency."; break;
		case -200507: errorMessage = "DAQmxErrorMeasCalAdjustDirectPathOutputImpedance."; break;
		case -200506: errorMessage = "DAQmxErrorMeasCalAdjustMainPathOutputImpedance."; break;
		case -200505: errorMessage = "DAQmxErrorMeasCalAdjustDirectPathGain."; break;
		case -200504: errorMessage = "DAQmxErrorMeasCalAdjustMainPathPostAmpGainAndOffset."; break;
		case -200503: errorMessage = "DAQmxErrorMeasCalAdjustMainPathPreAmpGain."; break;
		case -200502: errorMessage = "DAQmxErrorMeasCalAdjustMainPathPreAmpOffset."; break;
		case -200501: errorMessage = "DAQmxErrorInvalidDateTimeInEEPROM."; break;
		case -200500: errorMessage = "DAQmxErrorUnableToLocateErrorResources."; break;
		case -200499: errorMessage = "DAQmxErrorDotNetAPINotUnsigned32BitNumber."; break;
		case -200498: errorMessage = "DAQmxErrorInvalidRangeOfObjectsSyntaxInString."; break;
		case -200497: errorMessage = "DAQmxErrorAttemptToEnableLineNotPreviouslyDisabled."; break;
		case -200496: errorMessage = "DAQmxErrorInvalidCharInPattern."; break;
		case -200495: errorMessage = "DAQmxErrorIntermediateBufferFull."; break;
		case -200494: errorMessage = "DAQmxErrorLoadTaskFailsBecauseNoTimingOnDev."; break;
		case -200493: errorMessage = "DAQmxErrorCAPIReservedParamNotNULLNorEmpty."; break;
		case -200492: errorMessage = "DAQmxErrorCAPIReservedParamNotNULL."; break;
		case -200491: errorMessage = "DAQmxErrorCAPIReservedParamNotZero."; break;
		case -200490: errorMessage = "DAQmxErrorSampleValueOutOfRange."; break;
		case -200489: errorMessage = "DAQmxErrorChanAlreadyInTask."; break;
		case -200488: errorMessage = "DAQmxErrorVirtualChanDoesNotExist."; break;
		case -200486: errorMessage = "DAQmxErrorChanNotInTask."; break;
		case -200485: errorMessage = "DAQmxErrorTaskNotInDataNeighborhood."; break;
		case -200484: errorMessage = "DAQmxErrorCantSaveTaskWithoutReplace."; break;
		case -200483: errorMessage = "DAQmxErrorCantSaveChanWithoutReplace."; break;
		case -200482: errorMessage = "DAQmxErrorDevNotInTask."; break;
		case -200481: errorMessage = "DAQmxErrorDevAlreadyInTask."; break;
		case -200479: errorMessage = "DAQmxErrorCanNotPerformOpWhileTaskRunning."; break;
		case -200478: errorMessage = "DAQmxErrorCanNotPerformOpWhenNoChansInTask."; break;
		case -200477: errorMessage = "DAQmxErrorCanNotPerformOpWhenNoDevInTask."; break;
		case -200475: errorMessage = "DAQmxErrorCannotPerformOpWhenTaskNotRunning."; break;
		case -200474: errorMessage = "DAQmxErrorOperationTimedOut."; break;
		case -200473: errorMessage = "DAQmxErrorCannotReadWhenAutoStartFalseAndTaskNotRunningOrCommitted."; break;
		case -200472: errorMessage = "DAQmxErrorCannotWriteWhenAutoStartFalseAndTaskNotRunningOrCommitted."; break;
		case -200470: errorMessage = "DAQmxErrorTaskVersionNew."; break;
		case -200469: errorMessage = "DAQmxErrorChanVersionNew."; break;
		case -200467: errorMessage = "DAQmxErrorEmptyString."; break;
		case -200466: errorMessage = "DAQmxErrorChannelSizeTooBigForPortReadType."; break;
		case -200465: errorMessage = "DAQmxErrorChannelSizeTooBigForPortWriteType."; break;
		case -200464: errorMessage = "DAQmxErrorExpectedNumberOfChannelsVerificationFailed."; break;
		case -200463: errorMessage = "DAQmxErrorNumLinesMismatchInReadOrWrite."; break;
		case -200462: errorMessage = "DAQmxErrorOutputBufferEmpty."; break;
		case -200461: errorMessage = "DAQmxErrorInvalidChanName."; break;
		case -200460: errorMessage = "DAQmxErrorReadNoInputChansInTask."; break;
		case -200459: errorMessage = "DAQmxErrorWriteNoOutputChansInTask."; break;
		case -200457: errorMessage = "DAQmxErrorPropertyNotSupportedNotInputTask."; break;
		case -200456: errorMessage = "DAQmxErrorPropertyNotSupportedNotOutputTask."; break;
		case -200455: errorMessage = "DAQmxErrorGetPropertyNotInputBufferedTask."; break;
		case -200454: errorMessage = "DAQmxErrorGetPropertyNotOutputBufferedTask."; break;
		case -200453: errorMessage = "DAQmxErrorInvalidTimeoutVal."; break;
		case -200452: errorMessage = "DAQmxErrorAttributeNotSupportedInTaskContext."; break;
		case -200451: errorMessage = "DAQmxErrorAttributeNotQueryableUnlessTaskIsCommitted."; break;
		case -200450: errorMessage = "DAQmxErrorAttributeNotSettableWhenTaskIsRunning."; break;
		case -200449: errorMessage = "DAQmxErrorDACRngLowNotMinusRefValNorZero."; break;
		case -200448: errorMessage = "DAQmxErrorDACRngHighNotEqualRefVal."; break;
		case -200447: errorMessage = "DAQmxErrorUnitsNotFromCustomScale."; break;
		case -200446: errorMessage = "DAQmxErrorInvalidVoltageReadingDuringExtCal."; break;
		case -200445: errorMessage = "DAQmxErrorCalFunctionNotSupported."; break;
		case -200444: errorMessage = "DAQmxErrorInvalidPhysicalChanForCal."; break;
		case -200443: errorMessage = "DAQmxErrorExtCalNotComplete."; break;
		case -200442: errorMessage = "DAQmxErrorCantSyncToExtStimulusFreqDuringCal."; break;
		case -200441: errorMessage = "DAQmxErrorUnableToDetectExtStimulusFreqDuringCal."; break;
		case -200440: errorMessage = "DAQmxErrorInvalidCloseAction."; break;
		case -200439: errorMessage = "DAQmxErrorExtCalFunctionOutsideExtCalSession."; break;
		case -200438: errorMessage = "DAQmxErrorInvalidCalArea."; break;
		case -200437: errorMessage = "DAQmxErrorExtCalConstsInvalid."; break;
		case -200436: errorMessage = "DAQmxErrorStartTrigDelayWithExtSampClk."; break;
		case -200435: errorMessage = "DAQmxErrorDelayFromSampClkWithExtConv."; break;
		case -200434: errorMessage = "DAQmxErrorFewerThan2PreScaledVals."; break;
		case -200433: errorMessage = "DAQmxErrorFewerThan2ScaledValues."; break;
		case -200432: errorMessage = "DAQmxErrorPhysChanOutputType."; break;
		case -200431: errorMessage = "DAQmxErrorPhysChanMeasType."; break;
		case -200430: errorMessage = "DAQmxErrorInvalidPhysChanType."; break;
		case -200429: errorMessage = "DAQmxErrorLabVIEWEmptyTaskOrChans."; break;
		case -200428: errorMessage = "DAQmxErrorLabVIEWInvalidTaskOrChans."; break;
		case -200427: errorMessage = "DAQmxErrorInvalidRefClkRate."; break;
		case -200426: errorMessage = "DAQmxErrorInvalidExtTrigImpedance."; break;
		case -200425: errorMessage = "DAQmxErrorHystTrigLevelAIMax."; break;
		case -200424: errorMessage = "DAQmxErrorLineNumIncompatibleWithVideoSignalFormat."; break;
		case -200423: errorMessage = "DAQmxErrorTrigWindowAIMinAIMaxCombo."; break;
		case -200422: errorMessage = "DAQmxErrorTrigAIMinAIMax."; break;
		case -200421: errorMessage = "DAQmxErrorHystTrigLevelAIMin."; break;
		case -200420: errorMessage = "DAQmxErrorInvalidSampRateConsiderRIS."; break;
		case -200419: errorMessage = "DAQmxErrorInvalidReadPosDuringRIS."; break;
		case -200418: errorMessage = "DAQmxErrorImmedTrigDuringRISMode."; break;
		case -200417: errorMessage = "DAQmxErrorTDCNotEnabledDuringRISMode."; break;
		case -200416: errorMessage = "DAQmxErrorMultiRecWithRIS."; break;
		case -200415: errorMessage = "DAQmxErrorInvalidRefClkSrc."; break;
		case -200414: errorMessage = "DAQmxErrorInvalidSampClkSrc."; break;
		case -200413: errorMessage = "DAQmxErrorInsufficientOnBoardMemForNumRecsAndSamps."; break;
		case -200412: errorMessage = "DAQmxErrorInvalidAIAttenuation."; break;
		case -200411: errorMessage = "DAQmxErrorACCouplingNotAllowedWith50OhmImpedance."; break;
		case -200410: errorMessage = "DAQmxErrorInvalidRecordNum."; break;
		case -200409: errorMessage = "DAQmxErrorZeroSlopeLinearScale."; break;
		case -200408: errorMessage = "DAQmxErrorZeroReversePolyScaleCoeffs."; break;
		case -200407: errorMessage = "DAQmxErrorZeroForwardPolyScaleCoeffs."; break;
		case -200406: errorMessage = "DAQmxErrorNoReversePolyScaleCoeffs."; break;
		case -200405: errorMessage = "DAQmxErrorNoForwardPolyScaleCoeffs."; break;
		case -200404: errorMessage = "DAQmxErrorNoPolyScaleCoeffs."; break;
		case -200403: errorMessage = "DAQmxErrorReversePolyOrderLessThanNumPtsToCompute."; break;
		case -200402: errorMessage = "DAQmxErrorReversePolyOrderNotPositive."; break;
		case -200401: errorMessage = "DAQmxErrorNumPtsToComputeNotPositive."; break;
		case -200400: errorMessage = "DAQmxErrorWaveformLengthNotMultipleOfIncr."; break;
		case -200399: errorMessage = "DAQmxErrorCAPINoExtendedErrorInfoAvailable."; break;
		case -200398: errorMessage = "DAQmxErrorCVIFunctionNotFoundInDAQmxDLL."; break;
		case -200397: errorMessage = "DAQmxErrorCVIFailedToLoadDAQmxDLL."; break;
		case -200396: errorMessage = "DAQmxErrorNoCommonTrigLineForImmedRoute."; break;
		case -200395: errorMessage = "DAQmxErrorNoCommonTrigLineForTaskRoute."; break;
		case -200394: errorMessage = "DAQmxErrorF64PrptyValNotUnsignedInt."; break;
		case -200393: errorMessage = "DAQmxErrorRegisterNotWritable."; break;
		case -200392: errorMessage = "DAQmxErrorInvalidOutputVoltageAtSampClkRate."; break;
		case -200391: errorMessage = "DAQmxErrorStrobePhaseShiftDCMBecameUnlocked."; break;
		case -200390: errorMessage = "DAQmxErrorDrivePhaseShiftDCMBecameUnlocked."; break;
		case -200389: errorMessage = "DAQmxErrorClkOutPhaseShiftDCMBecameUnlocked."; break;
		case -200388: errorMessage = "DAQmxErrorOutputBoardClkDCMBecameUnlocked."; break;
		case -200387: errorMessage = "DAQmxErrorInputBoardClkDCMBecameUnlocked."; break;
		case -200386: errorMessage = "DAQmxErrorInternalClkDCMBecameUnlocked."; break;
		case -200385: errorMessage = "DAQmxErrorDCMLock."; break;
		case -200384: errorMessage = "DAQmxErrorDataLineReservedForDynamicOutput."; break;
		case -200383: errorMessage = "DAQmxErrorInvalidRefClkSrcGivenSampClkSrc."; break;
		case -200382: errorMessage = "DAQmxErrorNoPatternMatcherAvailable."; break;
		case -200381: errorMessage = "DAQmxErrorInvalidDelaySampRateBelowPhaseShiftDCMThresh."; break;
		case -200380: errorMessage = "DAQmxErrorStrainGageCalibration."; break;
		case -200379: errorMessage = "DAQmxErrorInvalidExtClockFreqAndDivCombo."; break;
		case -200378: errorMessage = "DAQmxErrorCustomScaleDoesNotExist."; break;
		case -200377: errorMessage = "DAQmxErrorOnlyFrontEndChanOpsDuringScan."; break;
		case -200376: errorMessage = "DAQmxErrorInvalidOptionForDigitalPortChannel."; break;
		case -200375: errorMessage = "DAQmxErrorUnsupportedSignalTypeExportSignal."; break;
		case -200374: errorMessage = "DAQmxErrorInvalidSignalTypeExportSignal."; break;
		case -200373: errorMessage = "DAQmxErrorUnsupportedTrigTypeSendsSWTrig."; break;
		case -200372: errorMessage = "DAQmxErrorInvalidTrigTypeSendsSWTrig."; break;
		case -200371: errorMessage = "DAQmxErrorRepeatedPhysicalChan."; break;
		case -200370: errorMessage = "DAQmxErrorResourcesInUseForRouteInTask."; break;
		case -200369: errorMessage = "DAQmxErrorResourcesInUseForRoute."; break;
		case -200368: errorMessage = "DAQmxErrorRouteNotSupportedByHW."; break;
		case -200367: errorMessage = "DAQmxErrorResourcesInUseForExportSignalPolarity."; break;
		case -200366: errorMessage = "DAQmxErrorResourcesInUseForInversionInTask."; break;
		case -200365: errorMessage = "DAQmxErrorResourcesInUseForInversion."; break;
		case -200364: errorMessage = "DAQmxErrorExportSignalPolarityNotSupportedByHW."; break;
		case -200363: errorMessage = "DAQmxErrorInversionNotSupportedByHW."; break;
		case -200362: errorMessage = "DAQmxErrorOverloadedChansExistNotRead."; break;
		case -200361: errorMessage = "DAQmxErrorInputFIFOOverflow2."; break;
		case -200360: errorMessage = "DAQmxErrorCJCChanNotSpecd."; break;
		case -200359: errorMessage = "DAQmxErrorCtrExportSignalNotPossible."; break;
		case -200358: errorMessage = "DAQmxErrorRefTrigWhenContinuous."; break;
		case -200357: errorMessage = "DAQmxErrorIncompatibleSensorOutputAndDeviceInputRanges."; break;
		case -200356: errorMessage = "DAQmxErrorCustomScaleNameUsed."; break;
		case -200355: errorMessage = "DAQmxErrorPropertyValNotSupportedByHW."; break;
		case -200354: errorMessage = "DAQmxErrorPropertyValNotValidTermName."; break;
		case -200353: errorMessage = "DAQmxErrorResourcesInUseForProperty."; break;
		case -200352: errorMessage = "DAQmxErrorCJCChanAlreadyUsed."; break;
		case -200351: errorMessage = "DAQmxErrorForwardPolynomialCoefNotSpecd."; break;
		case -200350: errorMessage = "DAQmxErrorTableScaleNumPreScaledAndScaledValsNotEqual."; break;
		case -200349: errorMessage = "DAQmxErrorTableScalePreScaledValsNotSpecd."; break;
		case -200348: errorMessage = "DAQmxErrorTableScaleScaledValsNotSpecd."; break;
		case -200347: errorMessage = "DAQmxErrorIntermediateBufferSizeNotMultipleOfIncr."; break;
		case -200346: errorMessage = "DAQmxErrorEventPulseWidthOutOfRange."; break;
		case -200345: errorMessage = "DAQmxErrorEventDelayOutOfRange."; break;
		case -200344: errorMessage = "DAQmxErrorSampPerChanNotMultipleOfIncr."; break;
		case -200343: errorMessage = "DAQmxErrorCannotCalculateNumSampsTaskNotStarted."; break;
		case -200342: errorMessage = "DAQmxErrorScriptNotInMem."; break;
		case -200341: errorMessage = "DAQmxErrorOnboardMemTooSmall."; break;
		case -200340: errorMessage = "DAQmxErrorReadAllAvailableDataWithoutBuffer."; break;
		case -200339: errorMessage = "DAQmxErrorPulseActiveAtStart."; break;
		case -200338: errorMessage = "DAQmxErrorCalTempNotSupported."; break;
		case -200337: errorMessage = "DAQmxErrorDelayFromSampClkTooLong."; break;
		case -200336: errorMessage = "DAQmxErrorDelayFromSampClkTooShort."; break;
		case -200335: errorMessage = "DAQmxErrorAIConvRateTooHigh."; break;
		case -200334: errorMessage = "DAQmxErrorDelayFromStartTrigTooLong."; break;
		case -200333: errorMessage = "DAQmxErrorDelayFromStartTrigTooShort."; break;
		case -200332: errorMessage = "DAQmxErrorSampRateTooHigh."; break;
		case -200331: errorMessage = "DAQmxErrorSampRateTooLow."; break;
		case -200330: errorMessage = "DAQmxErrorPFI0UsedForAnalogAndDigitalSrc."; break;
		case -200329: errorMessage = "DAQmxErrorPrimingCfgFIFO."; break;
		case -200328: errorMessage = "DAQmxErrorCannotOpenTopologyCfgFile."; break;
		case -200327: errorMessage = "DAQmxErrorInvalidDTInsideWfmDataType."; break;
		case -200326: errorMessage = "DAQmxErrorRouteSrcAndDestSame."; break;
		case -200325: errorMessage = "DAQmxErrorReversePolynomialCoefNotSpecd."; break;
		case -200324: errorMessage = "DAQmxErrorDevAbsentOrUnavailable."; break;
		case -200323: errorMessage = "DAQmxErrorNoAdvTrigForMultiDevScan."; break;
		case -200322: errorMessage = "DAQmxErrorInterruptsInsufficientDataXferMech."; break;
		case -200321: errorMessage = "DAQmxErrorInvalidAttentuationBasedOnMinMax."; break;
		case -200320: errorMessage = "DAQmxErrorCabledModuleCannotRouteSSH."; break;
		case -200319: errorMessage = "DAQmxErrorCabledModuleCannotRouteConvClk."; break;
		case -200318: errorMessage = "DAQmxErrorInvalidExcitValForScaling."; break;
		case -200317: errorMessage = "DAQmxErrorNoDevMemForScript."; break;
		case -200316: errorMessage = "DAQmxErrorScriptDataUnderflow."; break;
		case -200315: errorMessage = "DAQmxErrorNoDevMemForWaveform."; break;
		case -200314: errorMessage = "DAQmxErrorStreamDCMBecameUnlocked."; break;
		case -200313: errorMessage = "DAQmxErrorStreamDCMLock."; break;
		case -200312: errorMessage = "DAQmxErrorWaveformNotInMem."; break;
		case -200311: errorMessage = "DAQmxErrorWaveformWriteOutOfBounds."; break;
		case -200310: errorMessage = "DAQmxErrorWaveformPreviouslyAllocated."; break;
		case -200309: errorMessage = "DAQmxErrorSampClkTbMasterTbDivNotAppropriateForSampTbSrc."; break;
		case -200308: errorMessage = "DAQmxErrorSampTbRateSampTbSrcMismatch."; break;
		case -200307: errorMessage = "DAQmxErrorMasterTbRateMasterTbSrcMismatch."; break;
		case -200306: errorMessage = "DAQmxErrorSampsPerChanTooBig."; break;
		case -200305: errorMessage = "DAQmxErrorFinitePulseTrainNotPossible."; break;
		case -200304: errorMessage = "DAQmxErrorExtMasterTimebaseRateNotSpecified."; break;
		case -200303: errorMessage = "DAQmxErrorExtSampClkSrcNotSpecified."; break;
		case -200302: errorMessage = "DAQmxErrorInputSignalSlowerThanMeasTime."; break;
		case -200301: errorMessage = "DAQmxErrorCannotUpdatePulseGenProperty."; break;
		case -200300: errorMessage = "DAQmxErrorInvalidTimingType."; break;
		case -200297: errorMessage = "DAQmxErrorPropertyUnavailWhenUsingOnboardMemory."; break;
		case -200295: errorMessage = "DAQmxErrorCannotWriteAfterStartWithOnboardMemory."; break;
		case -200294: errorMessage = "DAQmxErrorNotEnoughSampsWrittenForInitialXferRqstCondition."; break;
		case -200293: errorMessage = "DAQmxErrorNoMoreSpace."; break;
		case -200292: errorMessage = "DAQmxErrorSamplesCanNotYetBeWritten."; break;
		case -200291: errorMessage = "DAQmxErrorGenStoppedToPreventIntermediateBufferRegenOfOldSamples."; break;
		case -200290: errorMessage = "DAQmxErrorGenStoppedToPreventRegenOfOldSamples."; break;
		case -200289: errorMessage = "DAQmxErrorSamplesNoLongerWriteable."; break;
		case -200288: errorMessage = "DAQmxErrorSamplesWillNeverBeGenerated."; break;
		case -200287: errorMessage = "DAQmxErrorNegativeWriteSampleNumber."; break;
		case -200286: errorMessage = "DAQmxErrorNoAcqStarted."; break;
		case -200284: errorMessage = "DAQmxErrorSamplesNotYetAvailable."; break;
		case -200283: errorMessage = "DAQmxErrorAcqStoppedToPreventIntermediateBufferOverflow."; break;
		case -200282: errorMessage = "DAQmxErrorNoRefTrigConfigured."; break;
		case -200281: errorMessage = "DAQmxErrorCannotReadRelativeToRefTrigUntilDone."; break;
		case -200279: errorMessage = "DAQmxErrorSamplesNoLongerAvailable."; break;
		case -200278: errorMessage = "DAQmxErrorSamplesWillNeverBeAvailable."; break;
		case -200277: errorMessage = "DAQmxErrorNegativeReadSampleNumber."; break;
		case -200276: errorMessage = "DAQmxErrorExternalSampClkAndRefClkThruSameTerm."; break;
		case -200275: errorMessage = "DAQmxErrorExtSampClkRateTooLowForClkIn."; break;
		case -200274: errorMessage = "DAQmxErrorExtSampClkRateTooHighForBackplane."; break;
		case -200273: errorMessage = "DAQmxErrorSampClkRateAndDivCombo."; break;
		case -200272: errorMessage = "DAQmxErrorSampClkRateTooLowForDivDown."; break;
		case -200271: errorMessage = "DAQmxErrorProductOfAOMinAndGainTooSmall."; break;
		case -200270: errorMessage = "DAQmxErrorInterpolationRateNotPossible."; break;
		case -200269: errorMessage = "DAQmxErrorOffsetTooLarge."; break;
		case -200268: errorMessage = "DAQmxErrorOffsetTooSmall."; break;
		case -200267: errorMessage = "DAQmxErrorProductOfAOMaxAndGainTooLarge."; break;
		case -200266: errorMessage = "DAQmxErrorMinAndMaxNotSymmetric."; break;
		case -200265: errorMessage = "DAQmxErrorInvalidAnalogTrigSrc."; break;
		case -200264: errorMessage = "DAQmxErrorTooManyChansForAnalogRefTrig."; break;
		case -200263: errorMessage = "DAQmxErrorTooManyChansForAnalogPauseTrig."; break;
		case -200262: errorMessage = "DAQmxErrorTrigWhenOnDemandSampTiming."; break;
		case -200261: errorMessage = "DAQmxErrorInconsistentAnalogTrigSettings."; break;
		case -200260: errorMessage = "DAQmxErrorMemMapDataXferModeSampTimingCombo."; break;
		case -200259: errorMessage = "DAQmxErrorInvalidJumperedAttr."; break;
		case -200258: errorMessage = "DAQmxErrorInvalidGainBasedOnMinMax."; break;
		case -200257: errorMessage = "DAQmxErrorInconsistentExcit."; break;
		case -200256: errorMessage = "DAQmxErrorTopologyNotSupportedByCfgTermBlock."; break;
		case -200255: errorMessage = "DAQmxErrorBuiltInTempSensorNotSupported."; break;
		case -200254: errorMessage = "DAQmxErrorInvalidTerm."; break;
		case -200253: errorMessage = "DAQmxErrorCannotTristateTerm."; break;
		case -200252: errorMessage = "DAQmxErrorCannotTristateBusyTerm."; break;
		case -200251: errorMessage = "DAQmxErrorNoDMAChansAvailable."; break;
		case -200250: errorMessage = "DAQmxErrorInvalidWaveformLengthWithinLoopInScript."; break;
		case -200249: errorMessage = "DAQmxErrorInvalidSubsetLengthWithinLoopInScript."; break;
		case -200248: errorMessage = "DAQmxErrorMarkerPosInvalidForLoopInScript."; break;
		case -200247: errorMessage = "DAQmxErrorIntegerExpectedInScript."; break;
		case -200246: errorMessage = "DAQmxErrorPLLBecameUnlocked."; break;
		case -200245: errorMessage = "DAQmxErrorPLLLock."; break;
		case -200244: errorMessage = "DAQmxErrorDDCClkOutDCMBecameUnlocked."; break;
		case -200243: errorMessage = "DAQmxErrorDDCClkOutDCMLock."; break;
		case -200242: errorMessage = "DAQmxErrorClkDoublerDCMBecameUnlocked."; break;
		case -200241: errorMessage = "DAQmxErrorClkDoublerDCMLock."; break;
		case -200240: errorMessage = "DAQmxErrorSampClkDCMBecameUnlocked."; break;
		case -200239: errorMessage = "DAQmxErrorSampClkDCMLock."; break;
		case -200238: errorMessage = "DAQmxErrorSampClkTimebaseDCMBecameUnlocked."; break;
		case -200237: errorMessage = "DAQmxErrorSampClkTimebaseDCMLock."; break;
		case -200236: errorMessage = "DAQmxErrorAttrCannotBeReset."; break;
		case -200235: errorMessage = "DAQmxErrorExplanationNotFound."; break;
		case -200234: errorMessage = "DAQmxErrorWriteBufferTooSmall."; break;
		case -200233: errorMessage = "DAQmxErrorSpecifiedAttrNotValid."; break;
		case -200232: errorMessage = "DAQmxErrorAttrCannotBeRead."; break;
		case -200231: errorMessage = "DAQmxErrorAttrCannotBeSet."; break;
		case -200230: errorMessage = "DAQmxErrorNULLPtrForC_Api."; break;
		case -200229: errorMessage = "DAQmxErrorReadBufferTooSmall."; break;
		case -200228: errorMessage = "DAQmxErrorBufferTooSmallForString."; break;
		case -200227: errorMessage = "DAQmxErrorNoAvailTrigLinesOnDevice."; break;
		case -200226: errorMessage = "DAQmxErrorTrigBusLineNotAvail."; break;
		case -200225: errorMessage = "DAQmxErrorCouldNotReserveRequestedTrigLine."; break;
		case -200224: errorMessage = "DAQmxErrorTrigLineNotFound."; break;
		case -200223: errorMessage = "DAQmxErrorSCXI1126ThreshHystCombination."; break;
		case -200222: errorMessage = "DAQmxErrorAcqStoppedToPreventInputBufferOverwrite."; break;
		case -200221: errorMessage = "DAQmxErrorTimeoutExceeded."; break;
		case -200220: errorMessage = "DAQmxErrorInvalidDeviceID."; break;
		case -200219: errorMessage = "DAQmxErrorInvalidAOChanOrder."; break;
		case -200218: errorMessage = "DAQmxErrorSampleTimingTypeAndDataXferMode."; break;
		case -200217: errorMessage = "DAQmxErrorBufferWithOnDemandSampTiming."; break;
		case -200216: errorMessage = "DAQmxErrorBufferAndDataXferMode."; break;
		case -200215: errorMessage = "DAQmxErrorMemMapAndBuffer."; break;
		case -200214: errorMessage = "DAQmxErrorNoAnalogTrigHW."; break;
		case -200213: errorMessage = "DAQmxErrorTooManyPretrigPlusMinPostTrigSamps."; break;
		case -200212: errorMessage = "DAQmxErrorInconsistentUnitsSpecified."; break;
		case -200211: errorMessage = "DAQmxErrorMultipleRelaysForSingleRelayOp."; break;
		case -200210: errorMessage = "DAQmxErrorMultipleDevIDsPerChassisSpecifiedInList."; break;
		case -200209: errorMessage = "DAQmxErrorDuplicateDevIDInList."; break;
		case -200208: errorMessage = "DAQmxErrorInvalidRangeStatementCharInList."; break;
		case -200207: errorMessage = "DAQmxErrorInvalidDeviceIDInList."; break;
		case -200206: errorMessage = "DAQmxErrorTriggerPolarityConflict."; break;
		case -200205: errorMessage = "DAQmxErrorCannotScanWithCurrentTopology."; break;
		case -200204: errorMessage = "DAQmxErrorUnexpectedIdentifierInFullySpecifiedPathInList."; break;
		case -200203: errorMessage = "DAQmxErrorSwitchCannotDriveMultipleTrigLines."; break;
		case -200202: errorMessage = "DAQmxErrorInvalidRelayName."; break;
		case -200201: errorMessage = "DAQmxErrorSwitchScanlistTooBig."; break;
		case -200200: errorMessage = "DAQmxErrorSwitchChanInUse."; break;
		case -200199: errorMessage = "DAQmxErrorSwitchNotResetBeforeScan."; break;
		case -200198: errorMessage = "DAQmxErrorInvalidTopology."; break;
		case -200197: errorMessage = "DAQmxErrorAttrNotSupported."; break;
		case -200196: errorMessage = "DAQmxErrorUnexpectedEndOfActionsInList."; break;
		case -200195: errorMessage = "DAQmxErrorPowerBudgetExceeded."; break;
		case -200194: errorMessage = "DAQmxErrorHWUnexpectedlyPoweredOffAndOn."; break;
		case -200193: errorMessage = "DAQmxErrorSwitchOperationNotSupported."; break;
		case -200192: errorMessage = "DAQmxErrorOnlyContinuousScanSupported."; break;
		case -200191: errorMessage = "DAQmxErrorSwitchDifferentTopologyWhenScanning."; break;
		case -200190: errorMessage = "DAQmxErrorDisconnectPathNotSameAsExistingPath."; break;
		case -200189: errorMessage = "DAQmxErrorConnectionNotPermittedOnChanReservedForRouting."; break;
		case -200188: errorMessage = "DAQmxErrorCannotConnectSrcChans."; break;
		case -200187: errorMessage = "DAQmxErrorCannotConnectChannelToItself."; break;
		case -200186: errorMessage = "DAQmxErrorChannelNotReservedForRouting."; break;
		case -200185: errorMessage = "DAQmxErrorCannotConnectChansDirectly."; break;
		case -200184: errorMessage = "DAQmxErrorChansAlreadyConnected."; break;
		case -200183: errorMessage = "DAQmxErrorChanDuplicatedInPath."; break;
		case -200182: errorMessage = "DAQmxErrorNoPathToDisconnect."; break;
		case -200181: errorMessage = "DAQmxErrorInvalidSwitchChan."; break;
		case -200180: errorMessage = "DAQmxErrorNoPathAvailableBetween2SwitchChans."; break;
		case -200179: errorMessage = "DAQmxErrorExplicitConnectionExists."; break;
		case -200178: errorMessage = "DAQmxErrorSwitchDifferentSettlingTimeWhenScanning."; break;
		case -200177: errorMessage = "DAQmxErrorOperationOnlyPermittedWhileScanning."; break;
		case -200176: errorMessage = "DAQmxErrorOperationNotPermittedWhileScanning."; break;
		case -200175: errorMessage = "DAQmxErrorHardwareNotResponding."; break;
		case -200173: errorMessage = "DAQmxErrorInvalidSampAndMasterTimebaseRateCombo."; break;
		case -200172: errorMessage = "DAQmxErrorNonZeroBufferSizeInProgIOXfer."; break;
		case -200171: errorMessage = "DAQmxErrorVirtualChanNameUsed."; break;
		case -200170: errorMessage = "DAQmxErrorPhysicalChanDoesNotExist."; break;
		case -200169: errorMessage = "DAQmxErrorMemMapOnlyForProgIOXfer."; break;
		case -200168: errorMessage = "DAQmxErrorTooManyChans."; break;
		case -200167: errorMessage = "DAQmxErrorCannotHaveCJTempWithOtherChans."; break;
		case -200166: errorMessage = "DAQmxErrorOutputBufferUnderwrite."; break;
		case -200163: errorMessage = "DAQmxErrorSensorInvalidCompletionResistance."; break;
		case -200162: errorMessage = "DAQmxErrorVoltageExcitIncompatibleWith2WireCfg."; break;
		case -200161: errorMessage = "DAQmxErrorIntExcitSrcNotAvailable."; break;
		case -200160: errorMessage = "DAQmxErrorCannotCreateChannelAfterTaskVerified."; break;
		case -200159: errorMessage = "DAQmxErrorLinesReservedForSCXIControl."; break;
		case -200158: errorMessage = "DAQmxErrorCouldNotReserveLinesForSCXIControl."; break;
		case -200157: errorMessage = "DAQmxErrorCalibrationFailed."; break;
		case -200156: errorMessage = "DAQmxErrorReferenceFrequencyInvalid."; break;
		case -200155: errorMessage = "DAQmxErrorReferenceResistanceInvalid."; break;
		case -200154: errorMessage = "DAQmxErrorReferenceCurrentInvalid."; break;
		case -200153: errorMessage = "DAQmxErrorReferenceVoltageInvalid."; break;
		case -200152: errorMessage = "DAQmxErrorEEPROMDataInvalid."; break;
		case -200151: errorMessage = "DAQmxErrorCabledModuleNotCapableOfRoutingAI."; break;
		case -200150: errorMessage = "DAQmxErrorChannelNotAvailableInParallelMode."; break;
		case -200149: errorMessage = "DAQmxErrorExternalTimebaseRateNotKnownForDelay."; break;
		case -200148: errorMessage = "DAQmxErrorFREQOUTCannotProduceDesiredFrequency."; break;
		case -200147: errorMessage = "DAQmxErrorMultipleCounterInputTask."; break;
		case -200146: errorMessage = "DAQmxErrorCounterStartPauseTriggerConflict."; break;
		case -200145: errorMessage = "DAQmxErrorCounterInputPauseTriggerAndSampleClockInvalid."; break;
		case -200144: errorMessage = "DAQmxErrorCounterOutputPauseTriggerInvalid."; break;
		case -200143: errorMessage = "DAQmxErrorCounterTimebaseRateNotSpecified."; break;
		case -200142: errorMessage = "DAQmxErrorCounterTimebaseRateNotFound."; break;
		case -200141: errorMessage = "DAQmxErrorCounterOverflow."; break;
		case -200140: errorMessage = "DAQmxErrorCounterNoTimebaseEdgesBetweenGates."; break;
		case -200139: errorMessage = "DAQmxErrorCounterMaxMinRangeFreq."; break;
		case -200138: errorMessage = "DAQmxErrorCounterMaxMinRangeTime."; break;
		case -200137: errorMessage = "DAQmxErrorSuitableTimebaseNotFoundTimeCombo."; break;
		case -200136: errorMessage = "DAQmxErrorSuitableTimebaseNotFoundFrequencyCombo."; break;
		case -200135: errorMessage = "DAQmxErrorInternalTimebaseSourceDivisorCombo."; break;
		case -200134: errorMessage = "DAQmxErrorInternalTimebaseSourceRateCombo."; break;
		case -200133: errorMessage = "DAQmxErrorInternalTimebaseRateDivisorSourceCombo."; break;
		case -200132: errorMessage = "DAQmxErrorExternalTimebaseRateNotknownForRate."; break;
		case -200131: errorMessage = "DAQmxErrorAnalogTrigChanNotFirstInScanList."; break;
		case -200130: errorMessage = "DAQmxErrorNoDivisorForExternalSignal."; break;
		case -200128: errorMessage = "DAQmxErrorAttributeInconsistentAcrossRepeatedPhysicalChannels."; break;
		case -200127: errorMessage = "DAQmxErrorCannotHandshakeWithPort0."; break;
		case -200126: errorMessage = "DAQmxErrorControlLineConflictOnPortC."; break;
		case -200125: errorMessage = "DAQmxErrorLines4To7ConfiguredForOutput."; break;
		case -200124: errorMessage = "DAQmxErrorLines4To7ConfiguredForInput."; break;
		case -200123: errorMessage = "DAQmxErrorLines0To3ConfiguredForOutput."; break;
		case -200122: errorMessage = "DAQmxErrorLines0To3ConfiguredForInput."; break;
		case -200121: errorMessage = "DAQmxErrorPortConfiguredForOutput."; break;
		case -200120: errorMessage = "DAQmxErrorPortConfiguredForInput."; break;
		case -200119: errorMessage = "DAQmxErrorPortConfiguredForStaticDigitalOps."; break;
		case -200118: errorMessage = "DAQmxErrorPortReservedForHandshaking."; break;
		case -200117: errorMessage = "DAQmxErrorPortDoesNotSupportHandshakingDataIO."; break;
		case -200116: errorMessage = "DAQmxErrorCannotTristate8255OutputLines."; break;
		case -200113: errorMessage = "DAQmxErrorTemperatureOutOfRangeForCalibration."; break;
		case -200112: errorMessage = "DAQmxErrorCalibrationHandleInvalid."; break;
		case -200111: errorMessage = "DAQmxErrorPasswordRequired."; break;
		case -200110: errorMessage = "DAQmxErrorIncorrectPassword."; break;
		case -200109: errorMessage = "DAQmxErrorPasswordTooLong."; break;
		case -200108: errorMessage = "DAQmxErrorCalibrationSessionAlreadyOpen."; break;
		case -200107: errorMessage = "DAQmxErrorSCXIModuleIncorrect."; break;
		case -200106: errorMessage = "DAQmxErrorAttributeInconsistentAcrossChannelsOnDevice."; break;
		case -200105: errorMessage = "DAQmxErrorSCXI1122ResistanceChanNotSupportedForCfg."; break;
		case -200104: errorMessage = "DAQmxErrorBracketPairingMismatchInList."; break;
		case -200103: errorMessage = "DAQmxErrorInconsistentNumSamplesToWrite."; break;
		case -200102: errorMessage = "DAQmxErrorIncorrectDigitalPattern."; break;
		case -200101: errorMessage = "DAQmxErrorIncorrectNumChannelsToWrite."; break;
		case -200100: errorMessage = "DAQmxErrorIncorrectReadFunction."; break;
		case -200099: errorMessage = "DAQmxErrorPhysicalChannelNotSpecified."; break;
		case -200098: errorMessage = "DAQmxErrorMoreThanOneTerminal."; break;
		case -200097: errorMessage = "DAQmxErrorMoreThanOneActiveChannelSpecified."; break;
		case -200096: errorMessage = "DAQmxErrorInvalidNumberSamplesToRead."; break;
		case -200095: errorMessage = "DAQmxErrorAnalogWaveformExpected."; break;
		case -200094: errorMessage = "DAQmxErrorDigitalWaveformExpected."; break;
		case -200093: errorMessage = "DAQmxErrorActiveChannelNotSpecified."; break;
		case -200092: errorMessage = "DAQmxErrorFunctionNotSupportedForDeviceTasks."; break;
		case -200091: errorMessage = "DAQmxErrorFunctionNotInLibrary."; break;
		case -200090: errorMessage = "DAQmxErrorLibraryNotPresent."; break;
		case -200089: errorMessage = "DAQmxErrorDuplicateTask."; break;
		case -200088: errorMessage = "DAQmxErrorInvalidTask."; break;
		case -200087: errorMessage = "DAQmxErrorInvalidChannel."; break;
		case -200086: errorMessage = "DAQmxErrorInvalidSyntaxForPhysicalChannelRange."; break;
		case -200082: errorMessage = "DAQmxErrorMinNotLessThanMax."; break;
		case -200081: errorMessage = "DAQmxErrorSampleRateNumChansConvertPeriodCombo."; break;
		case -200079: errorMessage = "DAQmxErrorAODuringCounter1DMAConflict."; break;
		case -200078: errorMessage = "DAQmxErrorAIDuringCounter0DMAConflict."; break;
		case -200077: errorMessage = "DAQmxErrorInvalidAttributeValue."; break;
		case -200076: errorMessage = "DAQmxErrorSuppliedCurrentDataOutsideSpecifiedRange."; break;
		case -200075: errorMessage = "DAQmxErrorSuppliedVoltageDataOutsideSpecifiedRange."; break;
		case -200074: errorMessage = "DAQmxErrorCannotStoreCalConst."; break;
		case -200073: errorMessage = "DAQmxErrorSCXIModuleNotFound."; break;
		case -200072: errorMessage = "DAQmxErrorDuplicatePhysicalChansNotSupported."; break;
		case -200071: errorMessage = "DAQmxErrorTooManyPhysicalChansInList."; break;
		case -200070: errorMessage = "DAQmxErrorInvalidAdvanceEventTriggerType."; break;
		case -200069: errorMessage = "DAQmxErrorDeviceIsNotAValidSwitch."; break;
		case -200068: errorMessage = "DAQmxErrorDeviceDoesNotSupportScanning."; break;
		case -200067: errorMessage = "DAQmxErrorScanListCannotBeTimed."; break;
		case -200066: errorMessage = "DAQmxErrorConnectOperatorInvalidAtPointInList."; break;
		case -200065: errorMessage = "DAQmxErrorUnexpectedSwitchActionInList."; break;
		case -200064: errorMessage = "DAQmxErrorUnexpectedSeparatorInList."; break;
		case -200063: errorMessage = "DAQmxErrorExpectedTerminatorInList."; break;
		case -200062: errorMessage = "DAQmxErrorExpectedConnectOperatorInList."; break;
		case -200061: errorMessage = "DAQmxErrorExpectedSeparatorInList."; break;
		case -200060: errorMessage = "DAQmxErrorFullySpecifiedPathInListContainsRange."; break;
		case -200059: errorMessage = "DAQmxErrorConnectionSeparatorAtEndOfList."; break;
		case -200058: errorMessage = "DAQmxErrorIdentifierInListTooLong."; break;
		case -200057: errorMessage = "DAQmxErrorDuplicateDeviceIDInListWhenSettling."; break;
		case -200056: errorMessage = "DAQmxErrorChannelNameNotSpecifiedInList."; break;
		case -200055: errorMessage = "DAQmxErrorDeviceIDNotSpecifiedInList."; break;
		case -200054: errorMessage = "DAQmxErrorSemicolonDoesNotFollowRangeInList."; break;
		case -200053: errorMessage = "DAQmxErrorSwitchActionInListSpansMultipleDevices."; break;
		case -200052: errorMessage = "DAQmxErrorRangeWithoutAConnectActionInList."; break;
		case -200051: errorMessage = "DAQmxErrorInvalidIdentifierFollowingSeparatorInList."; break;
		case -200050: errorMessage = "DAQmxErrorInvalidChannelNameInList."; break;
		case -200049: errorMessage = "DAQmxErrorInvalidNumberInRepeatStatementInList."; break;
		case -200048: errorMessage = "DAQmxErrorInvalidTriggerLineInList."; break;
		case -200047: errorMessage = "DAQmxErrorInvalidIdentifierInListFollowingDeviceID."; break;
		case -200046: errorMessage = "DAQmxErrorInvalidIdentifierInListAtEndOfSwitchAction."; break;
		case -200045: errorMessage = "DAQmxErrorDeviceRemoved."; break;
		case -200044: errorMessage = "DAQmxErrorRoutingPathNotAvailable."; break;
		case -200043: errorMessage = "DAQmxErrorRoutingHardwareBusy."; break;
		case -200042: errorMessage = "DAQmxErrorRequestedSignalInversionForRoutingNotPossible."; break;
		case -200041: errorMessage = "DAQmxErrorInvalidRoutingDestinationTerminalName."; break;
		case -200040: errorMessage = "DAQmxErrorInvalidRoutingSourceTerminalName."; break;
		case -200039: errorMessage = "DAQmxErrorRoutingNotSupportedForDevice."; break;
		case -200038: errorMessage = "DAQmxErrorWaitIsLastInstructionOfLoopInScript."; break;
		case -200037: errorMessage = "DAQmxErrorClearIsLastInstructionOfLoopInScript."; break;
		case -200036: errorMessage = "DAQmxErrorInvalidLoopIterationsInScript."; break;
		case -200035: errorMessage = "DAQmxErrorRepeatLoopNestingTooDeepInScript."; break;
		case -200034: errorMessage = "DAQmxErrorMarkerPositionOutsideSubsetInScript."; break;
		case -200033: errorMessage = "DAQmxErrorSubsetStartOffsetNotAlignedInScript."; break;
		case -200032: errorMessage = "DAQmxErrorInvalidSubsetLengthInScript."; break;
		case -200031: errorMessage = "DAQmxErrorMarkerPositionNotAlignedInScript."; break;
		case -200030: errorMessage = "DAQmxErrorSubsetOutsideWaveformInScript."; break;
		case -200029: errorMessage = "DAQmxErrorMarkerOutsideWaveformInScript."; break;
		case -200028: errorMessage = "DAQmxErrorWaveformInScriptNotInMem."; break;
		case -200027: errorMessage = "DAQmxErrorKeywordExpectedInScript."; break;
		case -200026: errorMessage = "DAQmxErrorBufferNameExpectedInScript."; break;
		case -200025: errorMessage = "DAQmxErrorProcedureNameExpectedInScript."; break;
		case -200024: errorMessage = "DAQmxErrorScriptHasInvalidIdentifier."; break;
		case -200023: errorMessage = "DAQmxErrorScriptHasInvalidCharacter."; break;
		case -200022: errorMessage = "DAQmxErrorResourceAlreadyReserved."; break;
		case -200020: errorMessage = "DAQmxErrorSelfTestFailed."; break;
		case -200019: errorMessage = "DAQmxErrorADCOverrun."; break;
		case -200018: errorMessage = "DAQmxErrorDACUnderflow."; break;
		case -200017: errorMessage = "DAQmxErrorInputFIFOUnderflow."; break;
		case -200016: errorMessage = "DAQmxErrorOutputFIFOUnderflow."; break;
		case -200015: errorMessage = "DAQmxErrorSCXISerialCommunication."; break;
		case -200014: errorMessage = "DAQmxErrorDigitalTerminalSpecifiedMoreThanOnce."; break;
		case -200012: errorMessage = "DAQmxErrorDigitalOutputNotSupported."; break;
		case -200011: errorMessage = "DAQmxErrorInconsistentChannelDirections."; break;
		case -200010: errorMessage = "DAQmxErrorInputFIFOOverflow."; break;
		case -200009: errorMessage = "DAQmxErrorTimeStampOverwritten."; break;
		case -200008: errorMessage = "DAQmxErrorStopTriggerHasNotOccurred."; break;
		case -200007: errorMessage = "DAQmxErrorRecordNotAvailable."; break;
		case -200006: errorMessage = "DAQmxErrorRecordOverwritten."; break;
		case -200005: errorMessage = "DAQmxErrorDataNotAvailable."; break;
		case -200004: errorMessage = "DAQmxErrorDataOverwrittenInDeviceMemory."; break;
		case -200003: errorMessage = "DAQmxErrorDuplicatedChannel."; break;
		case 200003: errorMessage = "DAQmxWarningTimestampCounterRolledOver."; break;
		case 200004: errorMessage = "DAQmxWarningInputTerminationOverloaded."; break;
		case 200005: errorMessage = "DAQmxWarningADCOverloaded."; break;
		case 200007: errorMessage = "DAQmxWarningPLLUnlocked."; break;
		case 200008: errorMessage = "DAQmxWarningCounter0DMADuringAIConflict."; break;
		case 200009: errorMessage = "DAQmxWarningCounter1DMADuringAOConflict."; break;
		case 200010: errorMessage = "DAQmxWarningStoppedBeforeDone."; break;
		case 200011: errorMessage = "DAQmxWarningRateViolatesSettlingTime."; break;
		case 200012: errorMessage = "DAQmxWarningRateViolatesMaxADCRate."; break;
		case 200013: errorMessage = "DAQmxWarningUserDefInfoStringTooLong."; break;
		case 200014: errorMessage = "DAQmxWarningTooManyInterruptsPerSecond."; break;
		case 200015: errorMessage = "DAQmxWarningPotentialGlitchDuringWrite."; break;
		case 200016: errorMessage = "DAQmxWarningDevNotSelfCalibratedWithDAQmx."; break;
		case 200017: errorMessage = "DAQmxWarningAISampRateTooLow."; break;
		case 200018: errorMessage = "DAQmxWarningAIConvRateTooLow."; break;
		case 200019: errorMessage = "DAQmxWarningReadOffsetCoercion."; break;
		case 200020: errorMessage = "DAQmxWarningPretrigCoercion."; break;
		case 200021: errorMessage = "DAQmxWarningSampValCoercedToMax."; break;
		case 200022: errorMessage = "DAQmxWarningSampValCoercedToMin."; break;
		case 200024: errorMessage = "DAQmxWarningPropertyVersionNew."; break;
		case 200025: errorMessage = "DAQmxWarningUserDefinedInfoTooLong."; break;
		case 200026: errorMessage = "DAQmxWarningCAPIStringTruncatedToFitBuffer."; break;
		case 200027: errorMessage = "DAQmxWarningSampClkRateTooLow."; break;
		case 200028: errorMessage = "DAQmxWarningPossiblyInvalidCTRSampsInFiniteDMAAcq."; break;
		case 200029: errorMessage = "DAQmxWarningRISAcqCompletedSomeBinsNotFilled."; break;
		case 200030: errorMessage = "DAQmxWarningPXIDevTempExceedsMaxOpTemp."; break;
		case 200031: errorMessage = "DAQmxWarningOutputGainTooLowForRFFreq."; break;
		case 200032: errorMessage = "DAQmxWarningOutputGainTooHighForRFFreq."; break;
		case 200033: errorMessage = "DAQmxWarningMultipleWritesBetweenSampClks."; break;
		case 200034: errorMessage = "DAQmxWarningDeviceMayShutDownDueToHighTemp."; break;
		case 209800: errorMessage = "DAQmxWarningReadNotCompleteBeforeSampClk."; break;
		case 209801: errorMessage = "DAQmxWarningWriteNotCompleteBeforeSampClk."; break;
		default:
			errorMessage = "Unknown error.";
		}
		return "(" + errorCode + ") " + errorMessage;
	}
	
}
