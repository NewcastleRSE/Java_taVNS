/**
 * ********************************************************************
 * JNI4NI Java Native Interface wrapper for National Instruments DAQ.
 * ********************************************************************
 * (c) 2015 David Kirkwood            Email: davekirkwood@hotmail.com
 * ********************************************************************
 * <p>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * <p>
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * <p>
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package kirkwood.nidaq.jna;
//import com.ochafik.lang.jnaerator.runtime.LibraryExtractor;
//import com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper;

import com.sun.jna.Native;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.win32.StdCallLibrary;

import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;

/**
 * JNA Wrapper for library <b>test</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Nicaiu extends StdCallLibrary {
    Nicaiu INSTANCE = (Nicaiu) Native.loadLibrary("nicaiu", Nicaiu.class);

    public static final int DAQmx_Val_GroupByChannel = (int) 0;
    public static final int DAQmx_Val_ChanPerLine = (int) 0;
    public static final int DAQmx_Val_ChanForAllLines = (int) 1;
    public static final int DAQmx_Val_Cfg_Default = (int) -1;
    public static final int DAQmx_Val_Volts = (int) 10348;
    public static final int DAQmx_Val_Amps = (int) 10342;
    public static final int DAQmx_Val_Default = (int) -1;
    public static final int DAQmx_Val_Rising = (int) 10280;
    public static final int DAQmx_Val_FiniteSamps = (int) 10178;
    public static final int DAQmx_Val_ContSamps = (int) 10123;
    public static final int DAQmx_Val_OnDemand = (int) 10390;


    /**
     * Original signature : <code>int32 DAQmxCreateDOChan(TaskHandle, const char[], const char[], int32)</code><br>
     * <i>native declaration : line 2511</i>
     */
    int DAQmxCreateDOChan(Pointer taskHandle, byte lines[], byte nameToAssignToLines[], int lineGrouping);

    	/**
	 * Original signature : <code>int32 DAQmxCreateTask(const char[], TaskHandle*)</code><br>
	 * <i>native declaration : line 2410</i>
	 */

    int DAQmxCreateDIChan(Pointer taskHandle, byte lines[], byte nameToAssignToLines[], int lineGrouping);

    /**
     * Original signature : <code>int32 DAQmxCreateDOChan(TaskHandle, const char[], const char[], int32)</code><br>
     * <i>native declaration : line 2511</i><br>
     */

    int DAQmxCreateTask(byte taskName[], PointerByReference taskHandle);

    /**
     * Original signature : <code>int32 DAQmxStartTask(TaskHandle)</code><br>
     * <i>native declaration : line 2414</i>
     */
    int DAQmxStartTask(Pointer taskHandle);

    /**
     * Original signature : <code>int32 DAQmxWriteDigitalLines(TaskHandle, int32, bool32, float64, bool32, const uInt8[], int32*, bool32*)</code><br>
     * <i>native declaration : line 2666</i><br>
     * @deprecated use the safer methods {@link #DAQmxWriteDigitalLines(Pointer, int, NativeLong, double, NativeLong, ByteBuffer, IntBuffer, NativeLongByReference)} and {@link #DAQmxWriteDigitalLines(Pointer, int, NativeLong, double, NativeLong, Pointer, IntByReference, NativeLongByReference)} instead
     */
    @Deprecated
    int DAQmxWriteDigitalLines(Pointer taskHandle, int numSampsPerChan, NativeLong autoStart, double timeout, NativeLong dataLayout, Pointer writeArray, IntByReference sampsPerChanWritten, NativeLongByReference reserved);

    /**
     * Original signature : <code>int32 DAQmxCreateAIVoltageChan(TaskHandle, const char[], const char[], int32, float64, float64, int32, const char[])</code><br>
     * <i>native declaration : line 2443</i>
     */
    int DAQmxCreateAIVoltageChan(Pointer taskHandle, byte physicalChannel[], byte nameToAssignToChannel[], int terminalConfig, double minVal, double maxVal, int units, byte customScaleName[]);

    /**
     * (Analog/Counter Timing)<br>
     * Original signature : <code>int32 DAQmxCfgSampClkTiming(TaskHandle, const char[], float64, int32, int32, uInt64)</code><br>
     * <i>native declaration : line 2547</i>
     */
    int DAQmxCfgSampClkTiming(Pointer taskHandle, byte source[], double rate, int activeEdge, int sampleMode, long sampsPerChan);

    /**
     * Original signature : <code>int32 DAQmxCreateAICurrentChan(TaskHandle, const char[], const char[], int32, float64, float64, int32, int32, float64, const char[])</code><br>
     * <i>native declaration : line 2444</i>
     */
    int DAQmxCreateAICurrentChan(Pointer taskHandle, byte physicalChannel[], byte nameToAssignToChannel[], int terminalConfig, double minVal, double maxVal, int units, int shuntResistorLoc, double extShuntResistorVal, byte customScaleName[]);


    /**
     * Original signature : <code>int32 DAQmxReadAnalogF64(TaskHandle, int32, float64, bool32, float64[], uInt32, int32*, bool32*)</code><br>
     * <i>native declaration : line 2601</i>
     */
    int DAQmxReadAnalogF64(Pointer taskHandle, int numSampsPerChan, double timeout, NativeLong fillMode, DoubleBuffer readArray, NativeLong arraySizeInSamps, IntBuffer sampsPerChanRead, NativeLongByReference reserved);

    /**
     * Original signature : <code>int32 DAQmxStopTask(TaskHandle)</code><br>
     * <i>native declaration : line 2415</i>
     */

    int DAQmxReadDigitalU32(Pointer taskHandle, int numSampsPerChan, double timeout, NativeLong fillMode, DoubleBuffer readArray, NativeLong arraySizeInSamps, IntBuffer sampsPerChanRead, NativeLongByReference reserved);

    /**
     * Original signature : <code>int32 DAQmxReadDigitalScalarU32(TaskHandle, float64, uInt32*, bool32*)</code><br>
     * <i>native declaration : line 2615</i>
     */

    int DAQmxStopTask(Pointer taskHandle);

    /**
     * Original signature : <code>int32 DAQmxClearTask(TaskHandle)</code><br>
     * <i>native declaration : line 2417</i>
     */
    int DAQmxClearTask(Pointer taskHandle);

    /**
     * Original signature : <code>int32 DAQmxResetDevice(const char[])</code><br>
     * <i>native declaration : line 2967</i>
     */
    int DAQmxResetDevice(byte deviceName[]);

    int DAQmxGetNthTaskChannel(Pointer taskHandle, NativeLong index, String buffer, int bufferSize);

    /**
     * Original signature : <code>int32 DAQmxGetNthTaskChannel(TaskHandle, uInt32, char[], int32)</code><br>
     * <i>native declaration : line 2424</i>
     */

    int DAQmxGetPhysicalChanName(Pointer taskHandle, String channel, String data, NativeLong bufferSize);
    /**
     * *** Set/Get functions for DAQmx_PhysicalChanName ***<br>
     * Original signature : <code>int32 DAQmxGetPhysicalChanName(TaskHandle, const char[], char*, uInt32)</code><br>
     * <i>native declaration : line 5375</i>
     */

    /**
     * Original signature : <code>int32 DAQmxReadDigitalLines(TaskHandle, int32, float64, bool32, uInt8[], uInt32, int32*, int32*, bool32*)</code><br>
     * <i>native declaration : line 2616</i>
     */
    int DAQmxReadDigitalLines(Pointer taskHandle, int numSampsPerChan, double timeout, NativeLong fillMode, ByteBuffer readArray, NativeLong arraySizeInBytes, IntBuffer sampsPerChanRead, IntBuffer numBytesPerSamp, NativeLongByReference reserved);

    /**
     * Original signature: <code>int32 DAQmxCreateAOVoltageChan (TaskHandle taskHandle, const char physicalChannel[], const char nameToAssignToChannel[], float64 minVal, float64 maxVal, int32 units, const char customScaleName[])</code>
     * Creates channel(s) to generate voltage and adds the channel(s) to the task you specify with taskHandle.
     *
     * @param taskHandle
     * @param physicalChannel
     * @param nameToAssignToLines
     * @param minVal
     * @param maxVal
     * @param units
     * @param customScaleName
     * @return
     */
    int DAQmxCreateAOVoltageChan(Pointer taskHandle, byte[] physicalChannel, byte[] nameToAssignToLines, double minVal,
                                 double maxVal, int units, byte[] customScaleName);

    /**
     * Writes multiple floating-point samples to a task that contains one or more analog output channels.
     *
     * Note: If you configured timing for your task, your write is considered a buffered write. Buffered writes require
     * a minimum buffer size of 2 samples. If you do not configure the buffer size using DAQmxCfgOutputBuffer, NI-DAQmx
     * automatically configures the buffer when you configure sample timing. If you attempt to write one sample for a
     * buffered write without configuring the buffer, you will receive an error.
     *
     * Original signature: <code>nt32 DAQmxWriteAnalogF64 (TaskHandle taskHandle, int32 numSampsPerChan,
     * bool32 autoStart, float64 timeout, bool32 dataLayout, float64 writeArray[], int32 *sampsPerChanWritten,
     * bool32 *reserved);</code>
     *
     * @param taskHandle
     * @param numSampsPerChan
     * @param autoStart
     * @param timeout
     * @param dataLayout
     * @param writeArray
     * @return
     */
    int DAQmxWriteAnalogF64(Pointer taskHandle, int numSampsPerChan, NativeLong autoStart, double timeout,
                            NativeLong dataLayout, DoubleBuffer writeArray, IntByReference sampsPerChanWritten,
                            NativeLongByReference reserved);
}

